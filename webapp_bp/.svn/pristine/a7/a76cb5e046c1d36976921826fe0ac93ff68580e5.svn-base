package com.yonghui.webapp.bp.api.invoice;

import java.io.IOException;
import java.io.Writer;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.yonghui.comp.ader.share.bean.AderEntity;
import com.yonghui.comp.invoice.share.InvoiceClient;
import com.yonghui.comp.invoice.share.InvoiceService;
import com.yonghui.comp.invoice.share.bean.InvoiceEntity;
import com.yonghui.comp.money.share.BalanceService;
import com.yonghui.comp.money.share.MoneyClient;
import com.yonghui.comp.money.share.bean.BalanceEntity;
import com.yonghui.webapp.bp.api.ApiHandler;
import com.yonghui.webapp.bp.util.JsonUtil;

import cn770880.jutil.data.RespWrapper;
import cn770880.jutil.string.StringUtil;

public class ApplyInvoiceHandler implements ApiHandler {

	@Override
	public void handle(HttpServletRequest request, HttpServletResponse response, Writer out, AderEntity ader)
			throws IOException {
		RespWrapper<Boolean> resp = RespWrapper.makeResp(7103, "根据ID查询发票信息详情出错", false);
		
		int addrId = StringUtil.convertInt(request.getParameter("addrId"), 0);
		if(addrId == 0) {
			resp.setErrMsg("请选择合法的地址");
			JsonUtil.MAPPER.writeValue(out, resp);
			return;
		}
		String baId = request.getParameter("baId");
		if(StringUtil.isEmpty(baId)) {
			resp.setErrMsg("请选择合法的消费流水");
			JsonUtil.MAPPER.writeValue(out, resp);
			return;
		}
		String title = request.getParameter("title");
		
		
		BalanceService balanceService = MoneyClient.getBalanceService();
		RespWrapper<BalanceEntity> lResp = balanceService.findById(baId);
		BalanceEntity balance = lResp.getObj();
		
		if(lResp.getErrCode() != 0 || balance == null) {
			resp.setErrMsg("请选择合法的消费流水");
			JsonUtil.MAPPER.writeValue(out, resp);
			return;
		}
		if(ader.getAdUin() != balance.getAdUin()) {
			resp.setErrMsg("消费流水非法");
			JsonUtil.MAPPER.writeValue(out, resp);
			return;
		}
		if(balance.getStatus() != 2) {
			resp.setErrMsg("消费流水处于未交易成功状态，不能申请开发票");
			JsonUtil.MAPPER.writeValue(out, resp);
			return;
		}
		
		try {
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Calendar calendar = Calendar.getInstance();
			calendar.setTimeInMillis(balance.getCrtTime());
			
			InvoiceService service = InvoiceClient.getInvoiceService();
			InvoiceEntity entity = new InvoiceEntity();
			entity.setBaId(baId);
			entity.setAcctPeriod(sdf.format(calendar.getTime()));
			entity.setAdUin(balance.getAdUin());
			entity.setAddrId(addrId);
			entity.setCorporation(ader.getCorporation());
			entity.setMoney(balance.getCash());
			entity.setTitle(title);
			entity.setApplyTime(System.currentTimeMillis());
			
			resp = service.add(entity);
			
			resp.setErrCode(0);
			resp.setErrMsg("");
			resp.setObj(true);
		} catch(Exception ex) {
			ex.printStackTrace();
		}
		
		JsonUtil.MAPPER.writeValue(out, resp);
	}

}
