//package com.yonghui.webapp.bp.api.report;
//
//import java.io.IOException;
//import java.io.OutputStream;
//import java.io.Writer;
//import java.net.URLEncoder;
//import java.text.SimpleDateFormat;
//import java.util.ArrayList;
//import java.util.Date;
//import java.util.HashMap;
//import java.util.List;
//import java.util.Map;
//import java.util.Map.Entry;
//import java.util.Set;
//
//import javax.servlet.http.HttpServletRequest;
//import javax.servlet.http.HttpServletResponse;
//
//import org.apache.commons.lang.math.NumberUtils;
//import org.apache.poi.hssf.usermodel.HSSFCell;
//import org.apache.poi.hssf.usermodel.HSSFRow;
//import org.apache.poi.hssf.usermodel.HSSFSheet;
//import org.apache.poi.hssf.usermodel.HSSFWorkbook;
//
//import com.yonghui.comp.ader.share.bean.AderEntity;
//import com.yonghui.comp.report.share.ReportClient;
//import com.yonghui.comp.report.share.ReportService;
//import com.yonghui.comp.report.share.bean.AdReport;
//import com.yonghui.webapp.bp.api.ApiHandler;
//import com.yonghui.webapp.bp.util.DateUtil;
//import com.yonghui.webapp.bp.util.JsonUtil;
//
//import cn770880.jutil.data.DataPage;
//import cn770880.jutil.data.RespWrapper;
//import cn770880.jutil.net.NetUtil;
//import cn770880.jutil.string.StringUtil;
//
//
//public class ExportAdReportExecl implements ApiHandler {
//	
//	private List<Map<Integer,String>> rowData = new ArrayList<Map<Integer, String>>();
//	private Map<Integer,Column> columnData = new HashMap<Integer, Column>();
//	
//	
//	@Override
//	public void handle(HttpServletRequest request,
//			HttpServletResponse response, Writer out, AderEntity ader) throws IOException {
//		ReportService service = ReportClient.getReportService();
//		int adUin = ader.getAdUin();
//		String reportDate = NetUtil.getStringParameter( request, "reportDate", "");
//		String bpName = NetUtil.getStringParameter( request, "bpName", "");
//		String iName = NetUtil.getStringParameter( request, "iName", "");
//		String adTitle = NetUtil.getStringParameter( request, "adTitle", "");
//
//		Map<String, Object> findParams = new HashMap<String, Object>();
//		if (StringUtil.isNotEmpty(reportDate)) {
//			String [] yearMonthSplitTemp = reportDate.split("-");
//			if (yearMonthSplitTemp.length == 2) {
//				int startYear = StringUtil.convertInt(yearMonthSplitTemp[0], 0);
//				int startMonth = StringUtil.convertInt(yearMonthSplitTemp[1], 0);
//				if (startYear > 0 && startMonth > 0) {
//					int endYear = startYear;
//					int endMonth = startMonth + 1;
//					if (endMonth > 12) {
//						endYear = endYear + 1;
//						endMonth = 1;
//					}
//					String startTimeStr = startYear + "-" + startMonth + "-01 00:00:00";
//					String endTimeStr = endYear + "-" + endMonth + "-01 00:00:00";
//					long startTime = DateUtil.getTime(startTimeStr);
//					long endTime = DateUtil.getTime(endTimeStr);
//					findParams.put("startTime", startTime);
//					findParams.put("endTime", endTime);
//				}
//			}
//		}
//		if (StringUtil.isNotEmpty(bpName))
//			findParams.put("bpName", bpName);
//		if (StringUtil.isNotEmpty(iName)) 
//			findParams.put("iName", iName);
//		if (StringUtil.isNotEmpty(adTitle))
//			findParams.put("adTitle", adTitle);
//
//		RespWrapper<DataPage<AdReport>> pageWrapper = service.findAdReportPage(findParams, adUin, 1, Integer.MAX_VALUE);
//		DataPage<AdReport> page = pageWrapper.getObj();
//		if (pageWrapper.getErrCode() != 0)
//			JsonUtil.MAPPER.writeValue( out, RespWrapper.makeResp(pageWrapper.getErrCode(), pageWrapper.getErrMsg(), null));
//		
//		List<AdReport> reports = page.getRecord();
//		System.out.println("需要导出execl的报表条数:"+reports.size());
//		
//		//生成导表数据
//		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss SSS");
//		System.out.println("生成导表数据开始:"+sf.format(System.currentTimeMillis()));
//		createExeclData(reports);
//		System.out.println("生成导表数据结束:"+sf.format(System.currentTimeMillis()));
//		//导出表格
//		try {
//			outExecl(response);
//			System.out.println("导出结束:"+sf.format(System.currentTimeMillis()));
//		} catch (Exception e) {
//			e.printStackTrace();
//			throw new RuntimeException("输出Execl时出现异常!");
//		}
//	}
//	
//	
//
//	public void createExeclData(List<AdReport> reports) {
//		
//		//第一行列名
//		String[] headers = new String[] {};
//		initColumnName(headers);
//		addRowDta(columnData);
//		
//		//定义参数名
//		String exportDate = formatDate(System.currentTimeMillis());		 //导表日期
//		Column orderid = columnData.get(1);	   	 //订单编号
//		Column createTime = columnData.get(2);	 //下单时间
//		Column payTime = columnData.get(3);	   	 //付款时间
//		Column checkTime = columnData.get(4);	 //审核时间
//		Column transferCreateTime = columnData.get(5);       //转运单创建时间
//		Column toworderid = columnData.get(6);       		 //官网订单号
//		Column transferPostNo = columnData.get(7);        	 //转运运单号
//		Column transferPostTime = columnData.get(8);      	 //官网发货时间
//		Column transferInStorageTime = columnData.get(9);    //转运入库时间
//		Column transferOutStorageTime = columnData.get(10);   //转运出库时间
//		Column transferToAirlineTime = columnData.get(11);    //递交航空时间
//		Column transferInCountryTime = columnData.get(12);   //抵达国内时间
//		Column postTime = columnData.get(13);       //国内快递发货时间
//		Column userSignTime = columnData.get(14);   //用户签收时间
//		Column postType = columnData.get(15);       //配送方式
//		Column postNo = columnData.get(16);         //运单号
//		Column depotName = columnData.get(17);      //发货仓库
//		Column status = columnData.get(18);   	   //订单状态
//		Column rname = columnData.get(19);   	   //收货人姓名
//		Column rphone = columnData.get(20);  	   //收货人电话
//		Column idcard = columnData.get(21);   	   //收货人身份证
//		Column province = columnData.get(22);      //省
//		Column city = columnData.get(23); 		   //市
//		Column district = columnData.get(24);      //区县
//		Column address = columnData.get(25);   	   //详细地址
//		Column zip = columnData.get(26);  		   //邮编
//		Column totalFee = columnData.get(27);		//订单总额
//		Column realTotalFee = columnData.get(28);	//实付总额
//		Column proId = columnData.get(29);  	   //商品ID
//		Column proName = columnData.get(30);   	   //商品名字
//		Column proSku = columnData.get(31);   	   //商品SKU
//		Column proMaterialid = columnData.get(32);  //物料编号
//		Column buyNum = columnData.get(33);   	    //购买数量
//		Column buyPrice = columnData.get(34);   	//购买单价
//		Column realPrice = columnData.get(35);   	//实付单价
//		Column proType = columnData.get(36);   	    //商品类型
//		Column sproId = columnData.get(37);   	    //子商品ID
//		Column sproName = columnData.get(38);   	//子商品名字
//		Column sproSku = columnData.get(39);   	    //子商品SKU
//		Column sproMaterialid = columnData.get(40); //子商品物料编号
//		Column sproNum = columnData.get(41);   		//子商品数量
//		Column sproPrice = columnData.get(42);   	//子商品购买单价
//		Column sRealPrice = columnData.get(43);   	//子商品实付单价
//		Column outOrderid = columnData.get(44);   	//外部订单号
//		Column ctfee = columnData.get(45);		    //消费税
//		Column vatfee = columnData.get(46);	        //增值税
//		Column tarifffee = columnData.get(47);      //关税
//		Column tifee = columnData.get(48);		    //保价费
//		Column gtfee = columnData.get(49); 	        //综合税
//		Column postfee = columnData.get(50);	    //运费
//		Column channel = columnData.get(51);        //渠道
//		Column uin = columnData.get(52);            //用户id
//		Column account = columnData.get(53);   	    //下单用户
//		Column ugchan = columnData.get(54);   	    //用户注册渠道
//		Column ogchan = columnData.get(55);   	    //下单渠道号	
//		Column companySname = columnData.get(56);	//企业简称
//		Column companyUname = columnData.get(57);   //商户姓名
//		Column companyFname = columnData.get(58);   //企业全称
//		Column patType = columnData.get(59);   		//支付渠道
//		Column payId = columnData.get(60);   		//支付账号
//		Column payFlowno = columnData.get(61);   	//支付流水号
//
//		if(reports.isEmpty()){
//			return;
//		}
//		
//		//---设值开始---
//		for (int i=0; i<reports.size(); i++) {
//			//只清空columnData的值,保留键
//			removeVal();
//			//开始取值
//			AdReport report = reports.get(i);
//			columnData.get(0).val = exportDate;							      //导表日期
//			orderid.val = o.getOrderid();	  								  //订单编号
//			outOrderid.val = o.getOutorderid();   							  //外部订单号	
//			createTime.val = formatDate(o.getCreatetime());	  				  //下单时间
//			payTime.val = formatDate(o.getPaytime());	   	  				  //付款时间
//			checkTime.val = formatDate(o.getVerifytime());	 				  //审核时间
//			toworderid.val = o.getToworderid();       		 				  //官网订单号
//			transferPostNo.val = o.getTransferinfo()==null ? "":o.getTransferinfo().getTransferid();  //转运运单号
//			postTime.val = formatDate(o.getPosttime());      		   		  //国内快递发货时间
//			postType.val = PostTypeEnums.getPostType(o.getPosttype()).getName(); //配送方式
//			postNo.val = o.getPostflowno();        							  	 //运单号
//			depotName.val = o.getDepotname();      							     //发货仓
//			status.val = OrderStatus.getName(o.getStatus());                     //订单状态
//			rname.val = o.getRname();   		//收货人姓名
//			rphone.val = o.getRphone();   		//收货人电话
//			idcard.val = o.getIdcard();   		//收货人身份证
//			province.val = o.getProvince();   	//省
//			city.val = o.getCity();   			//市
//			district.val = o.getDistrict();   	//区县
//			address.val = o.getAddress();   	//详细地址
//			zip.val = o.getZip();   			//邮编
//			//取出该订单的父订单商品总额
//			long fTotalFee = fTotalFeeMap.get(o.getForderid());   
//			totalFee.val = String.valueOf(fTotalFee);					//父订单商品总额
//			realTotalFee.val = String.valueOf(o.getRealvalue());		//父订单实付总额
//			ogchan.val = o.getG_chan();   	    				        //下单渠道号	
//			patType.val = o.getPt()==null ? "":o.getPt().getName();   	//支付渠道
//			payId.val = o.getPayid();			//支付账号
//			payFlowno.val = o.getPayflowno();	//支付流水号
//			uin.val = String.valueOf(o.getUin());                            //用户id
//			ctfee.val = String.valueOf(o.getTaxAndPostFee().getCtfee());     //消费税
//			vatfee.val = String.valueOf(o.getTaxAndPostFee().getVatfee());   //增值税
//			tarifffee.val = String.valueOf(o.getTaxAndPostFee().getTarifffee()); //	关税
//			tifee.val = String.valueOf(o.getTaxAndPostFee().getTifee());     //保价费
//			gtfee.val = String.valueOf(o.getTaxAndPostFee().getGtfee());     //综合税
//			postfee.val = String.valueOf(o.getTaxAndPostFee().getPostfee()); //运费
//			
//
//		}
//	}
//	
//	//输出数据Execl
//	@SuppressWarnings("resource")
//	private void outExecl(HttpServletResponse response) throws Exception{
//		System.out.println("行数："+rowData.size());
//		HSSFWorkbook wb = new HSSFWorkbook();
//		HSSFSheet sheet = wb.createSheet("sheet1");
//		for (int i = 0; i < rowData.size(); i++) {
//			HSSFRow row = sheet.createRow(i);
//			Map<Integer,String> colMap = rowData.get(i);
//			for (int j = 0; j < colMap.size(); j++) {
//				HSSFCell cell = row.createCell(j);
//				String valStr = colMap.get(j);
//				int val = StringUtil.convertInt(valStr, Integer.MIN_VALUE);
//				//判断一下内容值可以转为数字则按照数字输出到execl否则一律按字符串输出到execl中
//				if(val != Integer.MIN_VALUE){
//					cell.setCellValue(val);
//				}else{
//					cell.setCellValue(valStr);
//				}
//			}
//		}
//		String fileName = URLEncoder.encode("report.xls","UTF-8");
//		response.reset();
//		response.setContentType("application/x-download");
//		response.setCharacterEncoding("UTF-8");
//		response.addHeader("Content-Disposition","attachment;filename="+fileName); 
//		OutputStream os = response.getOutputStream();
//		wb.write(os);
//		os.flush();
//		os.close();
//	}
//	
//	//初始化列名
//	void initColumnName(String[] columnNames){
//		for (int i = 0; i < columnNames.length; i++) {
//			columnData.put(i, Column.makeObj(columnNames[i]));
//		}
//	}
//	
//	//清空列值,保留列数
//	void removeVal(){
//		Set<Integer> keys = columnData.keySet();
//		for (Integer key : keys) {
//			columnData.get(key).val="";
//		}
//	}
//	
//	//记录一行数据
//	void addRowDta(Map<Integer,Column> colData){
//		Map<Integer,String> newData = new HashMap<Integer, String>();
//		for (Entry<Integer, Column> en : colData.entrySet()) {
//			newData.put(en.getKey(), en.getValue().val);
//		}
//		rowData.add(newData);
//	}
//	
//	//格式化时间戳
//    String formatDate(long time){
//    	if(time < 1)
//    		return "";
//    	String formatStr = "yyyy-MM-dd HH:mm:ss";
//    	SimpleDateFormat sdf = new SimpleDateFormat(formatStr);
//    	return sdf.format(new Date(time));
//    }
//    
//	/**每行每的单元格对象*/
//	static class Column{
//		private String val;  //单元格中的内容值
//		
//		public static Column makeObj(String str){
//			Column col = new Column();
//			col.val = str;
//			return col;
//		}
//	}
//}
